{"version":3,"file":"index.js","sources":["../src/getRecord.ts","../src/updateRecord.ts","../src/index.ts"],"sourcesContent":["import type IStorage from './IStorage';\n\n/**\n * An union between empty and not empty records.\n */\ntype Record<T> = { empty: true } | { empty: false; payload: T };\n\n/**\n * Get an item from storage with its key and parse from JSON.\n * @param key - IStorage's key.\n * @param storage - IStorage's implementation.\n */\nconst getRecord = <T>(key: string, storage: IStorage): Record<T> => {\n  try {\n    const persistedValue = storage.getItem(key);\n    if (persistedValue !== null)\n      return {\n        empty: false,\n        payload: JSON.parse(persistedValue) as T,\n      };\n    return {\n      empty: true,\n    };\n  } catch (error) {\n    throw new Error(\n      \"Can't get persisted value from storage or parse it from JSON.\"\n    );\n  }\n};\n\nexport default getRecord;\n","import type IStorage from './IStorage';\n\n/**\n * Stringify value to JSON and set as storage's item using key.\n * @param key - IStorage's key.\n * @param storage - IStorage's implementation.\n * @param value - New value of record.\n */\nconst updateRecord = <T>(key: string, storage: IStorage, value: T) => {\n  try {\n    storage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    throw new Error(\"Can't stringify value to JSON or set it in the storage.\");\n  }\n};\n\nexport default updateRecord;\n","import { useCallback, useState } from 'react';\n\nimport getRecord from './getRecord';\nimport updateRecord from './updateRecord';\n\nimport type IStorage from './IStorage';\n\n/**\n * The default value for storage is browser's local storage API.\n */\nconst DEFAULT_STORAGE: IStorage = window.localStorage;\n\n/**\n * Options passed to the hook to decide what placeholder value and storage used\n */\nexport type Options<T> = {\n  storage?: IStorage;\n  placeholder: T;\n};\n\n/**\n * React Hook used to get an interface with LocalStorage or another API. The\n * params used are the `key` to access the value and `options` used to\n * determinate the placeholder value and the storage API.\n * @param key - Key used to access the LocalStorage value\n * @param options - Options of **useStorage**\n */\nexport const useStorage = <T>(\n  key: string,\n  { storage = DEFAULT_STORAGE, placeholder }: Options<T>\n) => {\n  const [value, setValue] = useState<T>(() => {\n    const record = getRecord<T>(key, storage);\n\n    if (!record.empty) {\n      return record.payload;\n    }\n\n    updateRecord(key, storage, placeholder);\n\n    return placeholder;\n  });\n\n  /**\n   * Function to change the value inside the Storage and in the State of Hook.\n   * @param newValue - value to change on Storage\n   */\n  const setStorageValue = useCallback(\n    (newValue: T) => {\n      updateRecord(key, storage, newValue);\n      setValue(newValue);\n    },\n    [key, storage, setValue]\n  );\n\n  return [value, setStorageValue] as const;\n};\n"],"names":["const","getRecord","key","storage","persistedValue","getItem","empty","payload","JSON","parse","error","Error","updateRecord","value","setItem","stringify","DEFAULT_STORAGE","window","localStorage","useStorage","placeholder","useState","record","setValue","setStorageValue","useCallback","newValue"],"mappings":";;;;;;;;;;;AAOA;;;;;AAKAA,IAAMC,SAAS,aAAOC,GAAJ,EAAiBC,OAAjB;AAChB,MAAI;AACF,QAAMC,cAAc,GAAGD,OAAO,CAACE,OAAR,CAAgBH,GAAhB,CAAvB;AACA,QAAIE,cAAc,KAAK,IAAvB,IACE,OAAO;AACLE,MAAAA,KAAK,EAAE,KADF;AAELC,MAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAWL,cAAX;AAFJ,KAAP;AAIF,WAAO;AACLE,MAAAA,KAAK,EAAE;AADF,KAAP;AAGD,GAVD,CAUE,OAAOI,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CACJ,+DADI,CAAN;AAGD;AACF,CAhBD;;ACVA;;;;;;AAMAX,IAAMY,YAAY,aAAOV,GAAJ,EAAiBC,OAAjB,EAAoCU,KAApC;AACnB,MAAI;AACFV,IAAAA,OAAO,CAACW,OAAR,CAAgBZ,GAAhB,EAAqBM,IAAI,CAACO,SAAL,CAAeF,KAAf,CAArB;AACD,GAFD,CAEE,OAAOH,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;AACF,CAND;;ACDA;;;;AAGAX,IAAMgB,eAAe,GAAaC,MAAM,CAACC,YAAzC;AAUA;;;;;;;;IAOaC,UAAU,aACrBjB,GADwB,KAAA;iEAEZc,gBAAiBI;;;AAE7B,cAA0BC,cAAQ;AAChC,QAAMC,MAAM,GAAGrB,SAAS,CAAIC,GAAJ,EAASC,OAAT,CAAxB;;AAEA,QAAI,CAACmB,MAAM,CAAChB,KAAZ,EAAmB;AACjB,aAAOgB,MAAM,CAACf,OAAd;AACD;;AAEDK,IAAAA,YAAY,CAACV,GAAD,EAAMC,OAAN,EAAeiB,WAAf,CAAZ;AAEA,WAAOA,WAAP;AACD,GAViC;EAA3BP;EAAOU;AAYd;;;;;AAIA,MAAMC,eAAe,GAAGC,iBAAW,WAChCC;AACCd,IAAAA,YAAY,CAACV,GAAD,EAAMC,OAAN,EAAeuB,QAAf,CAAZ;AACAH,IAAAA,QAAQ,CAACG,QAAD,CAAR;AACD,GAJgC,EAKjC,CAACxB,GAAD,EAAMC,OAAN,EAAeoB,QAAf,CALiC,CAAnC;AAQA,SAAO,CAACV,KAAD,EAAQW,eAAR,CAAP;AACD;;;;"}